rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isMember(roomId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/rooms/$(roomId)/members/$(request.auth.uid));
    }
    function isAdmin(roomId) {
      return isAuthenticated() && 'admin' in get(/databases/$(database)/documents/rooms/$(roomId)/members/$(request.auth.uid)).data.roles;
    }
    function isVerifier(roomId) {
      return isAuthenticated() && 'verifier' in get(/databases/$(database)/documents/rooms/$(roomId)/members/$(request.auth.uid)).data.roles;
    }
    function isAuthenticated() {
      return request.auth.uid != null;
    }
    function getChallenge(challengeId) {
      return get(/databases/$(database)/documents/challenges/$(challengeId)).data
    }
    match /feed/{entryId} {
      allow write: if isAuthenticated();
    }
    match /rooms/{roomId} {
      allow create: if isAuthenticated();
      allow update: if isAdmin(request.resource.id)
    }
    match /users/{account} {
      allow write: if isAuthenticated() && request.auth.uid == account;
    }
    match /rooms/{roomId}/members/{account} {
      allow write: if isAuthenticated() && request.auth.uid == account;
    }
    match /challenges/{challengeId} {
      allow create: if isAdmin(request.resource.data.roomId);
      allow update: if isAdmin(resource.data.roomId);
    }
    match /workproofs/{workproofId} {
      allow create: if
        isMember(request.resource.data.roomId)
        && getChallenge(request.resource.data.challengeId).get("status", "open") != "closed"
        && request.resource.data.weight == getChallenge(request.resource.data.challengeId).weight
        && request.resource.data.author == request.auth.uid
        && request.resource.data.weight is int;
      allow update: if (
          (isAdmin(resource.data.roomId) || isVerifier(resource.data.roomId))
          && resource.data.author != request.auth.uid
          && request.resource.data.diff(resource.data).affectedKeys() == ['verifiers', 'verifications'].toSet()
          && (
            request.resource.data.verifiers == [request.auth.uid] ||
            request.resource.data.verifiers.toSet().difference(resource.data.verifiers.toSet()) == [request.auth.uid].toSet()
          )
          && request.resource.data.verifications.keys().toSet() == request.resource.data.verifiers.toSet()
        ) || (
          resource.data.author == request.auth.uid
          && request.resource.data.diff(resource.data).affectedKeys() == ['description'].toSet()
        )
    }
    match /invites/{inviteId} {
      allow read: if false;
      allow create: if isAdmin(request.resource.data.roomId);

    }
    match /rewards/{inviteId} {
      allow create: if isAdmin(request.resource.data.roomId);
    }
    match /logs/{logId} {
      allow create: if true;
      allow read: if false;
    }
    match /{document=**} {
      allow write: if false;
      allow read: if true;
    }
  }
}